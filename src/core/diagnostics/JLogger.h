#ifndef J_LOGGER_H
#define J_LOGGER_H
/** @file JLogger.h 
    Defines a basic message logging system.
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Standard
#include <string>
#include <iostream>
#include <fstream>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Namespace Definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Gb {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Logging Constants
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** @brief Defines some named log levels.
    @details Log levels range from 0 to 100, with 100 representing a critical error and lower numbers describe
	    lesser errors, informational messages and debugging messages.
*/
enum class LogLevel : unsigned int {
    kDebug,
    kInfo,
    kWarning,
    kError,
    kCritical
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Forward Declarations
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class Logger
class Logger {
public:
    //-----------------------------------------------------------------------------------------------------------------
    /// @name Static Methods
    /// @{

    /// @brief Get the singleton instance of Logger
    static Logger& Get();

    // Wrappers for logging routines
    static void LogInfo(const char* msg);

    static void LogWarning(const char* msg);

    static void LogError(const char* msg);

    static void LogCritical(const char* msg);

    /// @}

    //-----------------------------------------------------------------------------------------------------------------
    /// @name Properties
    /// @{
    /// @}

    //-----------------------------------------------------------------------------------------------------------------
	/// @name Public Methods
	/// @{
    /// @brief Output a log message
    /// @param[in] message Message is the descriptive message of log.
    /// @param[in] level The level for the message.  The higher the value, the more severe the issue.
    void logMessage(const char* message, LogLevel level);

	/// @}
private:
    Logger();
    ~Logger();

    static std::vector<LogLevel, std::string> s_levelNames;
    std::mutex m_loggerMutex;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // end namespacing

#endif