/* @file GTest.h
   @brief An abstract Test class

   This abstraction is meant to be overridden to provide a framework for developing unit tests

*/

#ifndef G_TEST_H
#define G_TEST_H

/////////////////////////////////////////////////////////////////////////////////////////////
// Includes
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
// Begin namespace
/////////////////////////////////////////////////////////////////////////////////////////////

namespace Gb {


/////////////////////////////////////////////////////////////////////////////////////////////
// Class Definitions
/////////////////////////////////////////////////////////////////////////////////////////////


/// @class Test
class Test {
public:
    /// @name Static
    /// @{
    /// @}

    /// @name Constructors/Destructor
    /// @{

    Test() {}
    virtual ~Test() {}

    /// @}

    /// @name Public methods
    /// @{

    virtual void perform() = 0;

    /// @}

protected:
    /// @name Protected methods
    /// @{

    static void assert_(bool expression) {
        if (!expression) {
            throw("FAILURE");
        }
    }

    template<typename T>
    bool approxEqual(const T& t1, const T& t2, double tolerance = 1e-8) {
        return abs(t1 - t2) < tolerance;
    }

    /// @}

};



/////////////////////////////////////////////////////////////////////////////////////////////
// End namespace
/////////////////////////////////////////////////////////////////////////////////////////////
}


#endif